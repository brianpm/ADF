#!/usr/bin/env python

"""
script: run_diag

goal:  To allow a user to easily run the CAM diagnostics package from
       the command line.

Inputs:  The CAM diagnostics config file (in YAML format).  If the file is
         located in a different directory then the system path must also be
         included.

Any problems or issues with this script should be posted on the
DiscussCESM CAM forum located online here:

https://xenforo.cgd.ucar.edu/cesm/forums/cam.133/

Please note that registration may be required before a message can
be posted.  However, feel free to search the forums for similar issues
(and possible solutions) without needing to register or sign in.

Good luck, and may all your plots be helpful!
"""

#++++++++++++++++++++++++++++++
#Import standard python modules
#++++++++++++++++++++++++++++++

import os.path
import sys
import argparse

#+++++++++++++++++++++++++++++
#Import CAM diagnostics module
#+++++++++++++++++++++++++++++

#Determine local directory path:
_LOCAL_PATH = os.path.dirname(os.path.abspath(__file__))

#Add lib directory to path:
_DIAG_LIB_PATH = os.path.join(_LOCAL_PATH,"lib")

#Check that path actually exists:
if os.path.isdir(_DIAG_LIB_PATH):
    #If true, then add to Python path:
    sys.path.append(_DIAG_LIB_PATH)
else:
    #If not, then raise error:
    raise FileNotFoundError("'./lib' directory not found. Has 'run_diag' been moved?")

#Import CAM diagnostics object:
from CamDiag import CamDiag

#Import CAM diagnostics exiting script:
from CamDiag import end_diag_script

#################
#Helper functions
#################

#++++++++++++++++++++++++++++++
#Input argument parser function
#++++++++++++++++++++++++++++++

def parse_arguments():

    """
    Parses command-line input arguments using the argparse
    python module and outputs the final argument object.
    """

    #Create parser object:
    parser = argparse.ArgumentParser(description='Command-line wrapper to run the CAM diagnostics package.')

    #Add input arguments to be parsed:
    parser.add_argument('--config_file', metavar='<DIAG_YAML_FILE>', action='store', type=str,
                        help="YAML file used to configure CAM diagnostics (see config_example.yaml)")

    #Parse Argument inputs
    args = parser.parse_args()
    return args

############################
#Main CAM diagnostics script
############################

#Run code below if command is called
#directly from the command line:
if __name__ == "__main__":

    #+++++++++++++++++++++
    #Begin CAM diag script
    #+++++++++++++++++++++
    print('CAM diagnostics is starting...')

    #+++++++++++++++++++++++++++++++++++++++++++
    #Check that python is version 3.4 or greater
    #+++++++++++++++++++++++++++++++++++++++++++

    if sys.version_info[0] < 3:
        end_diag_script("Script only works with Python 3. Please switch python versions.")

    if sys.version_info[1] < 4:
        end_diag_script("Script only works with Python version 3.4 or greater.  Please update python.")

    #++++++++++++++++++++++++++++
    #Parse command-line arguments
    #++++++++++++++++++++++++++++

    args = parse_arguments()

    #Extract YAML config file name/path:
    config_yaml = args.config_file

    #+++++++++++++++++++++++++++++++++
    #Call main CAM diagnostics methods
    #+++++++++++++++++++++++++++++++++

    #Initalize CAM diagnostics object:
    diag = CamDiag(config_yaml)

    #Create CAM time series:
    diag.create_time_series()

    #Create CAM baseline time series (if needed):
    if not diag.compare_obs:
        diag.create_time_series(baseline=True)

    #Create CAM climatology (climo) files.
    #This call uses the "time_averaging_script" specified
    #in the config file:
    diag.create_climo()

    #Create CAM baseline climatology files (if needed).
    #This call uses the "time_averaging_script" specified
    #in the config file:
    if not diag.compare_obs:
        diag.create_climo(baseline=True)

    #Regrid CAM climatology files to match either
    #observations or CAM baseline climatologies:
    diag.regrid_climo()

    #Create plots:
    diag.create_plots()

    #+++++++++++++++
    #End diag script
    #+++++++++++++++
    print('CAM diagnostics has completed successfully.')
    sys.exit(0)
